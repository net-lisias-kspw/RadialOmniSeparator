// ros-0250.cfg v1.0.0.0
// Radial Omni Separator (ROS)
// created: 
// updated: 30 Sep 2022

// this file: CC BY-NC-SA 4.0 by zer0Kerbal

PART
{
	name = radialomniseparator-0250
	module = Part
	author = nohark and zer0Kerbal

	MODEL
	{
		model = nli2work/RadialOmniSeparator/Assets/radialSeparator
	}
	rescaleFactor = 2.0
	bulkheadProfiles = srf, size2

	node_stack_top = 0.0, 0.22, 0.0, 0.0 , 1.0, 0.0, 2, 1
	node_attach = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1, 1
	attachRules = 0,1,1,1,0

	fx_gasBurst_white = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, decouple
	sound_vent_large = decouple

	TechRequired = basicRocketry
	entryCost = 500
	cost = 200
	category = Coupling
	subcategory = 0
 
	title = #ROS-titl-250
	manufacturer = #PNP-Agency-titl
	description = #ROS-desc-250
	tags = #autoLOC_501792 // decouple
 
	mass = 0.1
	explosionPotential = 0
	fuelCrossFeed = False
	
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	
	crashTolerance = 8
	breakingForce = 150
	breakingTorque = 150

	maxTemp = 2000

	stagingIcon = DECOUPLER_HOR
	stageOffset = 1
	childStageOffset = 1
	
	MODULE
	{
		name = ModuleToggleCrossfeed
		crossfeedStatus = false
		toggleEditor = true
		toggleFlight = true
		techRequired = fuelSystems
	}

	MODULE
	{
		name = ModuleDecouple
		ejectionForce = 100
		isOmniDecoupler = true
	}
	
	MODULE
	{
		name = ModuleCargoPart
		stackableQuantity = 1
		packedVolume = 6139 // 6.13592 m3
	}

	DRAG_CUBE
	{
		cube = Default, 1.99,0.7908,1.399, 1.99,0.7908,1.399, 4.942,0.948,0.3027, 4.942,0.938,1.159, 1.867,0.7265,2.302, 1.867,0.7263,2.202, 0,-0.1461,-1.453E-07, 2.608,1.256,2.608
	}
	
	MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = False
		situationMask = 127
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0 // this just registers altitude as something to care about
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 2000
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
	}
}